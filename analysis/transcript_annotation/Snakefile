# This module analyzes the annotation type of the peak set. Ideally, peaks should locate in
# transcript region ( 5'UTR + CDS + 3'UTR ). The module will intersect peak with exon,
# UTRs, and CDS to see where do thses peaks locate in transcript.

def get_all_annotations(regions_dic, peak):
    out = []
    for r in regions_dic.keys():
        out.append('temp/{region}__{peak}.bed.gz'.format(region = r, peak = peak))
    return out

def get_all_annotations_str(regions_dic, peak):
    annotations = get_all_annotations(regions_dic, peak)
    return ','.join(annotations)

def get_all_annotation_names_str(regions_dic):
    return ','.join(regions_dic.keys())

def get_all_reports(peaks_dic):
    out = []
    for i in peaks_dic.keys():
        out.append('../../docs/transcript_annotation.{peak}.html'.format(peak = i))
    return out

rule all:
    input:
        get_all_reports(config['peaks'])

rule annotate:
    input:
        peak = lambda wildcards: config['peaks'][wildcards.peak],
        region = lambda wildcards: config['regions'][wildcards.region]
    output:
        temp('temp/{region}__{peak}.bed.gz')
    shell:
        '''bedtools intersect -a {input.peak} \
        -b <(zcat {input.region}) \
        -wo -split -s | \
        gzip > {output[0]}'''

rule summarize:
    input:
        peak = lambda wildcards: config['peaks'][wildcards.peak],
        annotations = lambda wildcards: get_all_annotations(config['regions'], wildcards.peak)
    params:
        annotations_str = lambda wildcards: get_all_annotations_str(config['regions'], wildcards.peak),
        annotation_names_str = get_all_annotation_names_str(config['regions'])
    output:
        'summary/{peak}.tab.gz'
    shell:
        '''Rscript ../../code/scripts/summarizeAnnotations.R --peak {input.peak} \
        --annotations {params.annotations_str} \
        --annotation_names {params.annotation_names_str} \
        --output {output[0]}'''

rule generate_report_rmd:
    input:
        'summary/{peak}.tab.gz'
    output:
        '../../rmd/transcript_annotation.{peak}.Rmd'
    run:
        rmd = '''---
title: "Annotating {peak_name}"
author: Yanyu Liang
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

# Dependencies

```{{r}}
library(ggplot2)
library(dplyr)
```

# Load Data

```{{r}}
mydat <- read.table('../analysis/transcript_annotation/{input}',
                    sep = '\\t',
                    header = T)
```

# Extract valid transcript hit

This is defined as the peak-transcript hit in which the peak locates completely in the transcript (namely exon).

```{{r}}
mydat.valid <- mydat[mydat$size == mydat$exon, ]
if(length(unique(mydat.valid$peak.id)) != length(unique(mydat$peak.id)))  {{  # To check if all peak locate in at least one transcript
  print('warning: Some peaks do NOT locate comppletely in transcript. They are: ')
  peaks.all <- unique(mydat$peak.id)
  print(peaks.all[!peaks.all %in% mydat.valid$peak.id])
}}   
```

# Number of valid transcripts per peak

```{{r}}
hit <- mydat.valid$peak.id
valid.count <- data.frame(table(hit))
ggplot(valid.count) + geom_histogram(aes(x = Freq), binwidth = 1) + ggtitle('# of valid transcript per peak') + scale_y_log10()
```

# Do they locate in exon?

```{{r}}
ggplot(mydat.valid) + geom_point(aes(x = size, y = exon)) +
  geom_abline(slope = 1, intercept = 0) +
  ggtitle('Peak size versus the size of annotated exon')
```

# Are they protein coding genes (PCGs)?

```{{r}}
ggplot(mydat.valid) +
  geom_point(aes(x = exon, y = CDS + fiveUTR + threeUTR)) + geom_abline(slope = 1, intercept = 0) +
  ggtitle('Annotated exon versus CDS + UTRs') + labs(y = 'CDS + UTRs')
```

# Where do PCG peaks locate?

```{{r}}
mydat.pcg <- mydat.valid %>%
  filter(CDS + threeUTR + fiveUTR != 0)
ggplot(mydat.pcg) +
  geom_point(aes(x = fiveUTR / size, y = threeUTR / size, color = CDS / size > 0.75)) +
  # scale_color_gradient2(low = 'blue', mid = 'white', high = 'red', midpoint = 0.75,  limits=c(0, 1)) +
  ggtitle('Fraction of UTRs/CDS in PCG peaks') +
  labs(x = 'Fraction of 5\\'UTR', y = 'Fraction of 3\\'UTR', color = 'CDS % > 0.75') +
  annotate("rect", xmin = 0.75, xmax = 1, ymin = 0, ymax = 0.1,
  alpha = .2) +
  annotate("rect", xmin = 0, xmax = 0.1, ymin = 0.75, ymax = 1,
  alpha = .2)
```
'''.format(input = input[0],
            peak_name = wildcards.peak)
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule generate_report_html:
    input:
        '../../rmd/transcript_annotation.{peak}.Rmd'
    output:
        '../../docs/transcript_annotation.{peak}.html'
    shell:
        '''Rscript -e "rmarkdown::render_site('./{input[0]}')"'''
